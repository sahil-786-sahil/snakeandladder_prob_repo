import java.util.LinkedList;
import java.util.Queue;
class snakeandladder {
    public int snakesAndLadders(int[][] board) {
        int n=board.length;
      int[] board2=new int[n*n+1];  
      boolean vis[]=new boolean[n*n+1];
      boolean LtoR=true;
      int indx=1;
      for(int i=n-1;i>=0;i--){
       if(LtoR){
        for(int j=0;j<n;j++){
            board2[indx++]=board[i][j];
        }
       }
       else{
        for(int j=n-1;j>=0;j--){
              board2[indx++]=board[i][j];
        }
       }
       LtoR=!LtoR;
      }
      Queue<Integer> q=new LinkedList<>();
      q.add(1);
      vis[1]=true;
      int moves=0;
      while(!q.isEmpty()){
        int size=q.size();
        for(int i=0;i<size;i++){
           int curr=q.poll();
            for(int dice=1;dice<=6;dice++){
            int next=curr+dice;
            if(next>n*n){
                continue;
            }
            if(board2[next]!=-1){
                next=board2[next];
            }
             if(next==n*n){
                return moves+1;
            }
            if(!vis[next]){
                vis[next]=true;
                q.add(next);
            }
        }
        }
        moves++;
      }
      return -1;
    }
    public static void main(String[] args) {
       int[][] board = {{-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1},{-1,35,-1,-1,13,-1},{-1,-1,-1,-1,-1,-1},{-1,15,-1,-1,-1,-1}};
       snakeandladder solve=new snakeandladder();
       int yourresult= solve.snakesAndLadders(board);
       System.out.println(yourresult);
    }
}
